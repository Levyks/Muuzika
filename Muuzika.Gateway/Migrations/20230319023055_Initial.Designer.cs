// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Muuzika.Gateway.Database;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Muuzika.Gateway.Migrations
{
    [DbContext(typeof(MuuzikaDbContext))]
    [Migration("20230319023055_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Muuzika.Gateway.Entities.AuthenticatableEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_authenticatables_created_by_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_authenticatables_updated_by_id");

                    b.ToTable("authenticatables");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Muuzika.Gateway.Entities.RoomEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer")
                        .HasColumnName("created_by_id");

                    b.Property<bool>("Finished")
                        .HasColumnType("boolean")
                        .HasColumnName("finished");

                    b.Property<bool>("Pending")
                        .HasColumnType("boolean")
                        .HasColumnName("pending");

                    b.Property<int>("ServerId")
                        .HasColumnType("integer")
                        .HasColumnName("server_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UpdatedById")
                        .HasColumnType("integer")
                        .HasColumnName("updated_by_id");

                    b.HasKey("Id")
                        .HasName("pk_rooms");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_rooms_code")
                        .HasFilter("[Finished] = 0");

                    b.HasIndex("CreatedById")
                        .HasDatabaseName("ix_rooms_created_by_id");

                    b.HasIndex("ServerId")
                        .HasDatabaseName("ix_rooms_server_id");

                    b.HasIndex("UpdatedById")
                        .HasDatabaseName("ix_rooms_updated_by_id");

                    b.ToTable("rooms", (string)null);
                });

            modelBuilder.Entity("Muuzika.Gateway.Entities.ServerEntity", b =>
                {
                    b.HasBaseType("Muuzika.Gateway.Entities.AuthenticatableEntity");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_servers_name");

                    b.ToTable("servers");
                });

            modelBuilder.Entity("Muuzika.Gateway.Entities.UserEntity", b =>
                {
                    b.HasBaseType("Muuzika.Gateway.Entities.AuthenticatableEntity");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime?>("LastTokenInvalidation")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_token_invalidation");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Muuzika.Gateway.Entities.AuthenticatableEntity", b =>
                {
                    b.HasOne("Muuzika.Gateway.Entities.AuthenticatableEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_authenticatables_authenticatables_created_by_id");

                    b.HasOne("Muuzika.Gateway.Entities.AuthenticatableEntity", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_authenticatables_authenticatables_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Muuzika.Gateway.Entities.RoomEntity", b =>
                {
                    b.HasOne("Muuzika.Gateway.Entities.AuthenticatableEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("fk_rooms_authenticatables_created_by_id");

                    b.HasOne("Muuzika.Gateway.Entities.ServerEntity", "Server")
                        .WithMany("Rooms")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_rooms_servers_server_id");

                    b.HasOne("Muuzika.Gateway.Entities.AuthenticatableEntity", "UpdatedBy")
                        .WithMany()
                        .HasForeignKey("UpdatedById")
                        .HasConstraintName("fk_rooms_authenticatables_updated_by_id");

                    b.Navigation("CreatedBy");

                    b.Navigation("Server");

                    b.Navigation("UpdatedBy");
                });

            modelBuilder.Entity("Muuzika.Gateway.Entities.ServerEntity", b =>
                {
                    b.HasOne("Muuzika.Gateway.Entities.AuthenticatableEntity", null)
                        .WithOne()
                        .HasForeignKey("Muuzika.Gateway.Entities.ServerEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_servers_authenticatables_id");
                });

            modelBuilder.Entity("Muuzika.Gateway.Entities.UserEntity", b =>
                {
                    b.HasOne("Muuzika.Gateway.Entities.AuthenticatableEntity", null)
                        .WithOne()
                        .HasForeignKey("Muuzika.Gateway.Entities.UserEntity", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_users_authenticatables_id");
                });

            modelBuilder.Entity("Muuzika.Gateway.Entities.ServerEntity", b =>
                {
                    b.Navigation("Rooms");
                });
#pragma warning restore 612, 618
        }
    }
}
